// Code generated by goctl. DO NOT EDIT!

package product_set

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productSetFieldNames          = builder.RawFieldNames(&ProductSet{})
	productSetRows                = strings.Join(productSetFieldNames, ",")
	productSetRowsExpectAutoSet   = strings.Join(stringx.Remove(productSetFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	productSetRowsWithPlaceHolder = strings.Join(stringx.Remove(productSetFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheProductSetIdPrefix = "cache:productSet:id:"
)

type (
	productSetModel interface {
		Insert(ctx context.Context, data *ProductSet) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProductSet, error)
		Update(ctx context.Context, data *ProductSet) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductSetModel struct {
		sqlc.CachedConn
		table string
	}

	ProductSet struct {
		Id         int64     `db:"id"`
		OrderId    int64     `db:"order_id"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		Remark     string    `db:"remark"`
		Version    int64     `db:"version"`
	}
)

func newProductSetModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultProductSetModel {
	return &defaultProductSetModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`product_set`",
	}
}

func (m *defaultProductSetModel) Insert(ctx context.Context, data *ProductSet) (sql.Result, error) {
	productSetIdKey := fmt.Sprintf("%s%v", cacheProductSetIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, productSetRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderId, data.Remark, data.Version)
	}, productSetIdKey)
	return ret, err
}

func (m *defaultProductSetModel) FindOne(ctx context.Context, id int64) (*ProductSet, error) {
	productSetIdKey := fmt.Sprintf("%s%v", cacheProductSetIdPrefix, id)
	var resp ProductSet
	err := m.QueryRowCtx(ctx, &resp, productSetIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productSetRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductSetModel) Update(ctx context.Context, data *ProductSet) error {
	productSetIdKey := fmt.Sprintf("%s%v", cacheProductSetIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productSetRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.OrderId, data.Remark, data.Version, data.Id)
	}, productSetIdKey)
	return err
}

func (m *defaultProductSetModel) Delete(ctx context.Context, id int64) error {
	productSetIdKey := fmt.Sprintf("%s%v", cacheProductSetIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, productSetIdKey)
	return err
}

func (m *defaultProductSetModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheProductSetIdPrefix, primary)
}

func (m *defaultProductSetModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productSetRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductSetModel) tableName() string {
	return m.table
}
