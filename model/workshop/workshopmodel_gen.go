// Code generated by goctl. DO NOT EDIT!

package workshop

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	workshopFieldNames          = builder.RawFieldNames(&Workshop{})
	workshopRows                = strings.Join(workshopFieldNames, ",")
	workshopRowsExpectAutoSet   = strings.Join(stringx.Remove(workshopFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	workshopRowsWithPlaceHolder = strings.Join(stringx.Remove(workshopFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheWorkshopIdPrefix               = "cache:workshop:id:"
	cacheWorkshopEnterpriseIdNamePrefix = "cache:workshop:enterpriseId:name:"
)

type (
	workshopModel interface {
		Insert(ctx context.Context, data *Workshop) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Workshop, error)
		FindOneByEnterpriseIdName(ctx context.Context, enterpriseId int64, name string) (*Workshop, error)
		Update(ctx context.Context, data *Workshop) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWorkshopModel struct {
		sqlc.CachedConn
		table string
	}

	Workshop struct {
		Id           int64          `db:"id"`
		EnterpriseId int64          `db:"enterprise_id"`
		Name         string         `db:"name"`
		Address      sql.NullString `db:"address"`
		PhoneNumber  sql.NullString `db:"phone_number"`
		ManagerId    sql.NullInt64  `db:"manager_id"`
		CreateTime   time.Time      `db:"create_time"`
		UpdateTime   time.Time      `db:"update_time"`
		Remark       sql.NullString `db:"remark"`
		Version      int64          `db:"version"`
	}
)

func newWorkshopModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultWorkshopModel {
	return &defaultWorkshopModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`workshop`",
	}
}

func (m *defaultWorkshopModel) Insert(ctx context.Context, data *Workshop) (sql.Result, error) {
	workshopEnterpriseIdNameKey := fmt.Sprintf("%s%v:%v", cacheWorkshopEnterpriseIdNamePrefix, data.EnterpriseId, data.Name)
	workshopIdKey := fmt.Sprintf("%s%v", cacheWorkshopIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, workshopRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.EnterpriseId, data.Name, data.Address, data.PhoneNumber, data.ManagerId, data.Remark, data.Version)
	}, workshopEnterpriseIdNameKey, workshopIdKey)
	return ret, err
}

func (m *defaultWorkshopModel) FindOne(ctx context.Context, id int64) (*Workshop, error) {
	workshopIdKey := fmt.Sprintf("%s%v", cacheWorkshopIdPrefix, id)
	var resp Workshop
	err := m.QueryRowCtx(ctx, &resp, workshopIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", workshopRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWorkshopModel) FindOneByEnterpriseIdName(ctx context.Context, enterpriseId int64, name string) (*Workshop, error) {
	workshopEnterpriseIdNameKey := fmt.Sprintf("%s%v:%v", cacheWorkshopEnterpriseIdNamePrefix, enterpriseId, name)
	var resp Workshop
	err := m.QueryRowIndexCtx(ctx, &resp, workshopEnterpriseIdNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `enterprise_id` = ? and `name` = ? limit 1", workshopRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, enterpriseId, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWorkshopModel) Update(ctx context.Context, data *Workshop) error {
	workshopEnterpriseIdNameKey := fmt.Sprintf("%s%v:%v", cacheWorkshopEnterpriseIdNamePrefix, data.EnterpriseId, data.Name)
	workshopIdKey := fmt.Sprintf("%s%v", cacheWorkshopIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, workshopRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.EnterpriseId, data.Name, data.Address, data.PhoneNumber, data.ManagerId, data.Remark, data.Version, data.Id)
	}, workshopEnterpriseIdNameKey, workshopIdKey)
	return err
}

func (m *defaultWorkshopModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	workshopEnterpriseIdNameKey := fmt.Sprintf("%s%v:%v", cacheWorkshopEnterpriseIdNamePrefix, data.EnterpriseId, data.Name)
	workshopIdKey := fmt.Sprintf("%s%v", cacheWorkshopIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, workshopEnterpriseIdNameKey, workshopIdKey)
	return err
}

func (m *defaultWorkshopModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheWorkshopIdPrefix, primary)
}

func (m *defaultWorkshopModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", workshopRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultWorkshopModel) tableName() string {
	return m.table
}
