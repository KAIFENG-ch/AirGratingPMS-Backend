// Code generated by goctl. DO NOT EDIT!

package statistic

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	statisticFieldNames          = builder.RawFieldNames(&Statistic{})
	statisticRows                = strings.Join(statisticFieldNames, ",")
	statisticRowsExpectAutoSet   = strings.Join(stringx.Remove(statisticFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	statisticRowsWithPlaceHolder = strings.Join(stringx.Remove(statisticFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheStatisticIdPrefix = "cache:statistic:id:"
)

type (
	statisticModel interface {
		Insert(ctx context.Context, data *Statistic) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Statistic, error)
		Update(ctx context.Context, data *Statistic) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStatisticModel struct {
		sqlc.CachedConn
		table string
	}

	Statistic struct {
		Id           int64     `db:"id"`
		EnterpriseId int64     `db:"enterprise_id"`
		WorkshopId   int64     `db:"workshop_id"`
		Time         time.Time `db:"time"`
		Version      int64     `db:"version"`
		CreateTime   time.Time `db:"create_time"`
		UpdateTime   time.Time `db:"update_time"`
	}
)

func newStatisticModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultStatisticModel {
	return &defaultStatisticModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`statistic`",
	}
}

func (m *defaultStatisticModel) Insert(ctx context.Context, data *Statistic) (sql.Result, error) {
	statisticIdKey := fmt.Sprintf("%s%v", cacheStatisticIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, statisticRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.EnterpriseId, data.WorkshopId, data.Time, data.Version)
	}, statisticIdKey)
	return ret, err
}

func (m *defaultStatisticModel) FindOne(ctx context.Context, id int64) (*Statistic, error) {
	statisticIdKey := fmt.Sprintf("%s%v", cacheStatisticIdPrefix, id)
	var resp Statistic
	err := m.QueryRowCtx(ctx, &resp, statisticIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", statisticRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStatisticModel) Update(ctx context.Context, data *Statistic) error {
	statisticIdKey := fmt.Sprintf("%s%v", cacheStatisticIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, statisticRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.EnterpriseId, data.WorkshopId, data.Time, data.Version, data.Id)
	}, statisticIdKey)
	return err
}

func (m *defaultStatisticModel) Delete(ctx context.Context, id int64) error {
	statisticIdKey := fmt.Sprintf("%s%v", cacheStatisticIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, statisticIdKey)
	return err
}

func (m *defaultStatisticModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheStatisticIdPrefix, primary)
}

func (m *defaultStatisticModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", statisticRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStatisticModel) tableName() string {
	return m.table
}
