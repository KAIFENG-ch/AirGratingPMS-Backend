// Code generated by goctl. DO NOT EDIT!

package client

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	clientFieldNames          = builder.RawFieldNames(&Client{})
	clientRows                = strings.Join(clientFieldNames, ",")
	clientRowsExpectAutoSet   = strings.Join(stringx.Remove(clientFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	clientRowsWithPlaceHolder = strings.Join(stringx.Remove(clientFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheClientIdPrefix                         = "cache:client:id:"
	cacheClientEnterpriseIdWorkshopIdNamePrefix = "cache:client:enterpriseId:workshopId:name:"
)

type (
	clientModel interface {
		Insert(ctx context.Context, data *Client) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Client, error)
		FindOneByEnterpriseIdWorkshopIdName(ctx context.Context, enterpriseId int64, workshopId int64, name string) (*Client, error)
		Update(ctx context.Context, data *Client) error
		Delete(ctx context.Context, id int64) error
	}

	defaultClientModel struct {
		sqlc.CachedConn
		table string
	}

	Client struct {
		Id           int64     `db:"id"`
		EnterpriseId int64     `db:"enterprise_id"`
		WorkshopId   int64     `db:"workshop_id"`
		Name         string    `db:"name"`
		PhoneNumber  string    `db:"phone_number"`
		Email        string    `db:"email"`
		Address      string    `db:"address"`
		CreateTime   time.Time `db:"create_time"`
		UpdateTime   time.Time `db:"update_time"`
		Remark       string    `db:"remark"`
		Version      int64     `db:"version"`
	}
)

func newClientModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultClientModel {
	return &defaultClientModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`client`",
	}
}

func (m *defaultClientModel) Insert(ctx context.Context, data *Client) (sql.Result, error) {
	clientEnterpriseIdWorkshopIdNameKey := fmt.Sprintf("%s%v:%v:%v", cacheClientEnterpriseIdWorkshopIdNamePrefix, data.EnterpriseId, data.WorkshopId, data.Name)
	clientIdKey := fmt.Sprintf("%s%v", cacheClientIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, clientRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.EnterpriseId, data.WorkshopId, data.Name, data.PhoneNumber, data.Email, data.Address, data.Remark, data.Version)
	}, clientEnterpriseIdWorkshopIdNameKey, clientIdKey)
	return ret, err
}

func (m *defaultClientModel) FindOne(ctx context.Context, id int64) (*Client, error) {
	clientIdKey := fmt.Sprintf("%s%v", cacheClientIdPrefix, id)
	var resp Client
	err := m.QueryRowCtx(ctx, &resp, clientIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", clientRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultClientModel) FindOneByEnterpriseIdWorkshopIdName(ctx context.Context, enterpriseId int64, workshopId int64, name string) (*Client, error) {
	clientEnterpriseIdWorkshopIdNameKey := fmt.Sprintf("%s%v:%v:%v", cacheClientEnterpriseIdWorkshopIdNamePrefix, enterpriseId, workshopId, name)
	var resp Client
	err := m.QueryRowIndexCtx(ctx, &resp, clientEnterpriseIdWorkshopIdNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `enterprise_id` = ? and `workshop_id` = ? and `name` = ? limit 1", clientRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, enterpriseId, workshopId, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultClientModel) Update(ctx context.Context, data *Client) error {
	clientEnterpriseIdWorkshopIdNameKey := fmt.Sprintf("%s%v:%v:%v", cacheClientEnterpriseIdWorkshopIdNamePrefix, data.EnterpriseId, data.WorkshopId, data.Name)
	clientIdKey := fmt.Sprintf("%s%v", cacheClientIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, clientRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.EnterpriseId, data.WorkshopId, data.Name, data.PhoneNumber, data.Email, data.Address, data.Remark, data.Version, data.Id)
	}, clientEnterpriseIdWorkshopIdNameKey, clientIdKey)
	return err
}

func (m *defaultClientModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	clientEnterpriseIdWorkshopIdNameKey := fmt.Sprintf("%s%v:%v:%v", cacheClientEnterpriseIdWorkshopIdNamePrefix, data.EnterpriseId, data.WorkshopId, data.Name)
	clientIdKey := fmt.Sprintf("%s%v", cacheClientIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, clientEnterpriseIdWorkshopIdNameKey, clientIdKey)
	return err
}

func (m *defaultClientModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheClientIdPrefix, primary)
}

func (m *defaultClientModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", clientRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultClientModel) tableName() string {
	return m.table
}
