// Code generated by goctl. DO NOT EDIT!

package staffer

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	stafferFieldNames          = builder.RawFieldNames(&Staffer{})
	stafferRows                = strings.Join(stafferFieldNames, ",")
	stafferRowsExpectAutoSet   = strings.Join(stringx.Remove(stafferFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	stafferRowsWithPlaceHolder = strings.Join(stringx.Remove(stafferFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheStafferIdPrefix                   = "cache:staffer:id:"
	cacheStafferEnterpriseIdUsernamePrefix = "cache:staffer:enterpriseId:username:"
)

type (
	stafferModel interface {
		Insert(ctx context.Context, data *Staffer) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Staffer, error)
		FindOneByEnterpriseIdUsername(ctx context.Context, enterpriseId int64, username string) (*Staffer, error)
		Update(ctx context.Context, data *Staffer) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStafferModel struct {
		sqlc.CachedConn
		table string
	}

	Staffer struct {
		Id             int64     `db:"id"`
		EnterpriseId   int64     `db:"enterprise_id"`
		WorkshopId     int64     `db:"workshop_id"`
		Username       string    `db:"username"`
		Role           string    `db:"role"`
		Name           string    `db:"name"`
		HashedPassword string    `db:"hashed_password"`
		Gender         string    `db:"gender"`
		PhoneNumber    string    `db:"phone_number"`
		Email          string    `db:"email"`
		Address        string    `db:"address"`
		CreateTime     time.Time `db:"create_time"`
		UpdateTime     time.Time `db:"update_time"`
		ExpireTime     int64     `db:"expire_time"`
		Remark         string    `db:"remark"`
		Version        int64     `db:"version"`
	}
)

func newStafferModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultStafferModel {
	return &defaultStafferModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`staffer`",
	}
}

func (m *defaultStafferModel) Insert(ctx context.Context, data *Staffer) (sql.Result, error) {
	stafferEnterpriseIdUsernameKey := fmt.Sprintf("%s%v:%v", cacheStafferEnterpriseIdUsernamePrefix, data.EnterpriseId, data.Username)
	stafferIdKey := fmt.Sprintf("%s%v", cacheStafferIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, stafferRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.EnterpriseId, data.WorkshopId, data.Username, data.Role, data.Name, data.HashedPassword, data.Gender, data.PhoneNumber, data.Email, data.Address, data.ExpireTime, data.Remark, data.Version)
	}, stafferEnterpriseIdUsernameKey, stafferIdKey)
	return ret, err
}

func (m *defaultStafferModel) FindOne(ctx context.Context, id int64) (*Staffer, error) {
	stafferIdKey := fmt.Sprintf("%s%v", cacheStafferIdPrefix, id)
	var resp Staffer
	err := m.QueryRowCtx(ctx, &resp, stafferIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stafferRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStafferModel) FindOneByEnterpriseIdUsername(ctx context.Context, enterpriseId int64, username string) (*Staffer, error) {
	stafferEnterpriseIdUsernameKey := fmt.Sprintf("%s%v:%v", cacheStafferEnterpriseIdUsernamePrefix, enterpriseId, username)
	var resp Staffer
	err := m.QueryRowIndexCtx(ctx, &resp, stafferEnterpriseIdUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `enterprise_id` = ? and `username` = ? limit 1", stafferRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, enterpriseId, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStafferModel) Update(ctx context.Context, data *Staffer) error {
	stafferEnterpriseIdUsernameKey := fmt.Sprintf("%s%v:%v", cacheStafferEnterpriseIdUsernamePrefix, data.EnterpriseId, data.Username)
	stafferIdKey := fmt.Sprintf("%s%v", cacheStafferIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, stafferRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.EnterpriseId, data.WorkshopId, data.Username, data.Role, data.Name, data.HashedPassword, data.Gender, data.PhoneNumber, data.Email, data.Address, data.ExpireTime, data.Remark, data.Version, data.Id)
	}, stafferEnterpriseIdUsernameKey, stafferIdKey)
	return err
}

func (m *defaultStafferModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	stafferEnterpriseIdUsernameKey := fmt.Sprintf("%s%v:%v", cacheStafferEnterpriseIdUsernamePrefix, data.EnterpriseId, data.Username)
	stafferIdKey := fmt.Sprintf("%s%v", cacheStafferIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, stafferEnterpriseIdUsernameKey, stafferIdKey)
	return err
}

func (m *defaultStafferModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheStafferIdPrefix, primary)
}

func (m *defaultStafferModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stafferRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStafferModel) tableName() string {
	return m.table
}
