// Code generated by goctl. DO NOT EDIT!

package operation

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	operationFieldNames          = builder.RawFieldNames(&Operation{})
	operationRows                = strings.Join(operationFieldNames, ",")
	operationRowsExpectAutoSet   = strings.Join(stringx.Remove(operationFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	operationRowsWithPlaceHolder = strings.Join(stringx.Remove(operationFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheOperationIdPrefix = "cache:operation:id:"
)

type (
	operationModel interface {
		Insert(ctx context.Context, data *Operation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Operation, error)
		Update(ctx context.Context, data *Operation) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOperationModel struct {
		sqlc.CachedConn
		table string
	}

	Operation struct {
		Id                   int64     `db:"id"`
		EnterpriseId         int64     `db:"enterprise_id"`
		WorkshopId           int64     `db:"workshop_id"`
		StafferId            int64     `db:"staffer_id"`
		OperationName        string    `db:"operation_name"`
		OperationTable       string    `db:"operation_table"`
		OperationId          int64     `db:"operation_id"`
		ValueBeforeOperation string    `db:"value_before_operation"`
		ValueAfterOperation  string    `db:"value_after_operation"`
		OperationTime        time.Time `db:"operation_time"`
	}
)

func newOperationModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultOperationModel {
	return &defaultOperationModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`operation`",
	}
}

func (m *defaultOperationModel) Insert(ctx context.Context, data *Operation) (sql.Result, error) {
	operationIdKey := fmt.Sprintf("%s%v", cacheOperationIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, operationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.EnterpriseId, data.WorkshopId, data.StafferId, data.OperationName, data.OperationTable, data.OperationId, data.ValueBeforeOperation, data.ValueAfterOperation, data.OperationTime)
	}, operationIdKey)
	return ret, err
}

func (m *defaultOperationModel) FindOne(ctx context.Context, id int64) (*Operation, error) {
	operationIdKey := fmt.Sprintf("%s%v", cacheOperationIdPrefix, id)
	var resp Operation
	err := m.QueryRowCtx(ctx, &resp, operationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", operationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOperationModel) Update(ctx context.Context, data *Operation) error {
	operationIdKey := fmt.Sprintf("%s%v", cacheOperationIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, operationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.EnterpriseId, data.WorkshopId, data.StafferId, data.OperationName, data.OperationTable, data.OperationId, data.ValueBeforeOperation, data.ValueAfterOperation, data.OperationTime, data.Id)
	}, operationIdKey)
	return err
}

func (m *defaultOperationModel) Delete(ctx context.Context, id int64) error {
	operationIdKey := fmt.Sprintf("%s%v", cacheOperationIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, operationIdKey)
	return err
}

func (m *defaultOperationModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheOperationIdPrefix, primary)
}

func (m *defaultOperationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", operationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOperationModel) tableName() string {
	return m.table
}
