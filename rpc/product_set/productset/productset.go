// Code generated by goctl. DO NOT EDIT!
// Source: product_set.proto

package productset

import (
	"context"

	"air-grating-pms-backend/rpc/product_set/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteReq          = pb.DeleteReq
	Empty              = pb.Empty
	FindListByOrderReq = pb.FindListByOrderReq
	FindOneByIdReq     = pb.FindOneByIdReq
	InsertResp         = pb.InsertResp
	ProductSetInfo     = pb.ProductSetInfo
	ProductSetList     = pb.ProductSetList

	Productset interface {
		Insert(ctx context.Context, in *ProductSetInfo, opts ...grpc.CallOption) (*InsertResp, error)
		Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error)
		Update(ctx context.Context, in *ProductSetInfo, opts ...grpc.CallOption) (*Empty, error)
		//  rpc CustomUpdate (ProductSetInfo) returns (Empty);
		FindOneById(ctx context.Context, in *FindOneByIdReq, opts ...grpc.CallOption) (*ProductSetInfo, error)
		FindListByOrder(ctx context.Context, in *FindListByOrderReq, opts ...grpc.CallOption) (*ProductSetList, error)
	}

	defaultProductset struct {
		cli zrpc.Client
	}
)

func NewProductset(cli zrpc.Client) Productset {
	return &defaultProductset{
		cli: cli,
	}
}

func (m *defaultProductset) Insert(ctx context.Context, in *ProductSetInfo, opts ...grpc.CallOption) (*InsertResp, error) {
	client := pb.NewProductsetClient(m.cli.Conn())
	return client.Insert(ctx, in, opts...)
}

func (m *defaultProductset) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewProductsetClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}

func (m *defaultProductset) Update(ctx context.Context, in *ProductSetInfo, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewProductsetClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

//  rpc CustomUpdate (ProductSetInfo) returns (Empty);
func (m *defaultProductset) FindOneById(ctx context.Context, in *FindOneByIdReq, opts ...grpc.CallOption) (*ProductSetInfo, error) {
	client := pb.NewProductsetClient(m.cli.Conn())
	return client.FindOneById(ctx, in, opts...)
}

func (m *defaultProductset) FindListByOrder(ctx context.Context, in *FindListByOrderReq, opts ...grpc.CallOption) (*ProductSetList, error) {
	client := pb.NewProductsetClient(m.cli.Conn())
	return client.FindListByOrder(ctx, in, opts...)
}
