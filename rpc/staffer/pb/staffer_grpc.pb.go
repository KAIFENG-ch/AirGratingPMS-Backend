// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: staffer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StafferClient is the client API for Staffer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StafferClient interface {
	Insert(ctx context.Context, in *StafferInfo, opts ...grpc.CallOption) (*InsertResp, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error)
	Change(ctx context.Context, in *StafferInfoWithId, opts ...grpc.CallOption) (*Empty, error)
	PartialChange(ctx context.Context, in *StafferInfoWithId, opts ...grpc.CallOption) (*Empty, error)
	FindOneByName(ctx context.Context, in *FindOneByNameReq, opts ...grpc.CallOption) (*StafferInfo, error)
	FindListByWorkshop(ctx context.Context, in *FindListByWorkshopReq, opts ...grpc.CallOption) (*StafferList, error)
	FindListByEnterprise(ctx context.Context, in *FindListByEnterpriseReq, opts ...grpc.CallOption) (*StafferList, error)
	InsertXa(ctx context.Context, in *StafferInfo, opts ...grpc.CallOption) (*InsertResp, error)
}

type stafferClient struct {
	cc grpc.ClientConnInterface
}

func NewStafferClient(cc grpc.ClientConnInterface) StafferClient {
	return &stafferClient{cc}
}

func (c *stafferClient) Insert(ctx context.Context, in *StafferInfo, opts ...grpc.CallOption) (*InsertResp, error) {
	out := new(InsertResp)
	err := c.cc.Invoke(ctx, "/staffer.staffer/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stafferClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/staffer.staffer/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stafferClient) Change(ctx context.Context, in *StafferInfoWithId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/staffer.staffer/Change", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stafferClient) PartialChange(ctx context.Context, in *StafferInfoWithId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/staffer.staffer/PartialChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stafferClient) FindOneByName(ctx context.Context, in *FindOneByNameReq, opts ...grpc.CallOption) (*StafferInfo, error) {
	out := new(StafferInfo)
	err := c.cc.Invoke(ctx, "/staffer.staffer/FindOneByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stafferClient) FindListByWorkshop(ctx context.Context, in *FindListByWorkshopReq, opts ...grpc.CallOption) (*StafferList, error) {
	out := new(StafferList)
	err := c.cc.Invoke(ctx, "/staffer.staffer/FindListByWorkshop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stafferClient) FindListByEnterprise(ctx context.Context, in *FindListByEnterpriseReq, opts ...grpc.CallOption) (*StafferList, error) {
	out := new(StafferList)
	err := c.cc.Invoke(ctx, "/staffer.staffer/FindListByEnterprise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stafferClient) InsertXa(ctx context.Context, in *StafferInfo, opts ...grpc.CallOption) (*InsertResp, error) {
	out := new(InsertResp)
	err := c.cc.Invoke(ctx, "/staffer.staffer/InsertXa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StafferServer is the server API for Staffer service.
// All implementations must embed UnimplementedStafferServer
// for forward compatibility
type StafferServer interface {
	Insert(context.Context, *StafferInfo) (*InsertResp, error)
	Delete(context.Context, *DeleteReq) (*Empty, error)
	Change(context.Context, *StafferInfoWithId) (*Empty, error)
	PartialChange(context.Context, *StafferInfoWithId) (*Empty, error)
	FindOneByName(context.Context, *FindOneByNameReq) (*StafferInfo, error)
	FindListByWorkshop(context.Context, *FindListByWorkshopReq) (*StafferList, error)
	FindListByEnterprise(context.Context, *FindListByEnterpriseReq) (*StafferList, error)
	InsertXa(context.Context, *StafferInfo) (*InsertResp, error)
	mustEmbedUnimplementedStafferServer()
}

// UnimplementedStafferServer must be embedded to have forward compatible implementations.
type UnimplementedStafferServer struct {
}

func (UnimplementedStafferServer) Insert(context.Context, *StafferInfo) (*InsertResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedStafferServer) Delete(context.Context, *DeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStafferServer) Change(context.Context, *StafferInfoWithId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Change not implemented")
}
func (UnimplementedStafferServer) PartialChange(context.Context, *StafferInfoWithId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialChange not implemented")
}
func (UnimplementedStafferServer) FindOneByName(context.Context, *FindOneByNameReq) (*StafferInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneByName not implemented")
}
func (UnimplementedStafferServer) FindListByWorkshop(context.Context, *FindListByWorkshopReq) (*StafferList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindListByWorkshop not implemented")
}
func (UnimplementedStafferServer) FindListByEnterprise(context.Context, *FindListByEnterpriseReq) (*StafferList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindListByEnterprise not implemented")
}
func (UnimplementedStafferServer) InsertXa(context.Context, *StafferInfo) (*InsertResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertXa not implemented")
}
func (UnimplementedStafferServer) mustEmbedUnimplementedStafferServer() {}

// UnsafeStafferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StafferServer will
// result in compilation errors.
type UnsafeStafferServer interface {
	mustEmbedUnimplementedStafferServer()
}

func RegisterStafferServer(s grpc.ServiceRegistrar, srv StafferServer) {
	s.RegisterService(&Staffer_ServiceDesc, srv)
}

func _Staffer_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StafferInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StafferServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffer.staffer/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StafferServer).Insert(ctx, req.(*StafferInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staffer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StafferServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffer.staffer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StafferServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staffer_Change_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StafferInfoWithId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StafferServer).Change(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffer.staffer/Change",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StafferServer).Change(ctx, req.(*StafferInfoWithId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staffer_PartialChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StafferInfoWithId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StafferServer).PartialChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffer.staffer/PartialChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StafferServer).PartialChange(ctx, req.(*StafferInfoWithId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staffer_FindOneByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StafferServer).FindOneByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffer.staffer/FindOneByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StafferServer).FindOneByName(ctx, req.(*FindOneByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staffer_FindListByWorkshop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindListByWorkshopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StafferServer).FindListByWorkshop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffer.staffer/FindListByWorkshop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StafferServer).FindListByWorkshop(ctx, req.(*FindListByWorkshopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staffer_FindListByEnterprise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindListByEnterpriseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StafferServer).FindListByEnterprise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffer.staffer/FindListByEnterprise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StafferServer).FindListByEnterprise(ctx, req.(*FindListByEnterpriseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staffer_InsertXa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StafferInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StafferServer).InsertXa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffer.staffer/InsertXa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StafferServer).InsertXa(ctx, req.(*StafferInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Staffer_ServiceDesc is the grpc.ServiceDesc for Staffer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Staffer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "staffer.staffer",
	HandlerType: (*StafferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _Staffer_Insert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Staffer_Delete_Handler,
		},
		{
			MethodName: "Change",
			Handler:    _Staffer_Change_Handler,
		},
		{
			MethodName: "PartialChange",
			Handler:    _Staffer_PartialChange_Handler,
		},
		{
			MethodName: "FindOneByName",
			Handler:    _Staffer_FindOneByName_Handler,
		},
		{
			MethodName: "FindListByWorkshop",
			Handler:    _Staffer_FindListByWorkshop_Handler,
		},
		{
			MethodName: "FindListByEnterprise",
			Handler:    _Staffer_FindListByEnterprise_Handler,
		},
		{
			MethodName: "InsertXa",
			Handler:    _Staffer_InsertXa_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "staffer.proto",
}
