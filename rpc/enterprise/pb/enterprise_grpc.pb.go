// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: enterprise.proto

package pb

import (
	context "context"
	"fmt"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnterpriseClient is the client API for Enterprise service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnterpriseClient interface {
	Insert(ctx context.Context, in *EnterpriseInfo, opts ...grpc.CallOption) (*InsertResp, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error)
	Change(ctx context.Context, in *EnterpriseInfoWithId, opts ...grpc.CallOption) (*Empty, error)
	PartialChange(ctx context.Context, in *EnterpriseInfoWithId, opts ...grpc.CallOption) (*Empty, error)
	FindOneByName(ctx context.Context, in *FindOneByNameReq, opts ...grpc.CallOption) (*EnterpriseInfo, error)
	InsertXa(ctx context.Context, in *EnterpriseInfo, opts ...grpc.CallOption) (*InsertResp, error)
}

type enterpriseClient struct {
	cc grpc.ClientConnInterface
}

func NewEnterpriseClient(cc grpc.ClientConnInterface) EnterpriseClient {
	return &enterpriseClient{cc}
}

func (c *enterpriseClient) Insert(ctx context.Context, in *EnterpriseInfo, opts ...grpc.CallOption) (*InsertResp, error) {
	out := new(InsertResp)
	err := c.cc.Invoke(ctx, "/enterprise.enterprise/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/enterprise.enterprise/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseClient) Change(ctx context.Context, in *EnterpriseInfoWithId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/enterprise.enterprise/Change", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseClient) PartialChange(ctx context.Context, in *EnterpriseInfoWithId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/enterprise.enterprise/PartialChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseClient) FindOneByName(ctx context.Context, in *FindOneByNameReq, opts ...grpc.CallOption) (*EnterpriseInfo, error) {
	out := new(EnterpriseInfo)
	err := c.cc.Invoke(ctx, "/enterprise.enterprise/FindOneByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseClient) InsertXa(ctx context.Context, in *EnterpriseInfo, opts ...grpc.CallOption) (*InsertResp, error) {
	out := new(InsertResp)
	err := c.cc.Invoke(ctx, "/enterprise.enterprise/InsertXa", in, out, opts...)
	if err != nil {
		fmt.Println("====================================================================================================")
		fmt.Println(err.Error())
		fmt.Println("====================================================================================================")
		return nil, err
	}
	return out, nil
}

// EnterpriseServer is the server API for Enterprise service.
// All implementations must embed UnimplementedEnterpriseServer
// for forward compatibility
type EnterpriseServer interface {
	Insert(context.Context, *EnterpriseInfo) (*InsertResp, error)
	Delete(context.Context, *DeleteReq) (*Empty, error)
	Change(context.Context, *EnterpriseInfoWithId) (*Empty, error)
	PartialChange(context.Context, *EnterpriseInfoWithId) (*Empty, error)
	FindOneByName(context.Context, *FindOneByNameReq) (*EnterpriseInfo, error)
	InsertXa(context.Context, *EnterpriseInfo) (*InsertResp, error)
	mustEmbedUnimplementedEnterpriseServer()
}

// UnimplementedEnterpriseServer must be embedded to have forward compatible implementations.
type UnimplementedEnterpriseServer struct {
}

func (UnimplementedEnterpriseServer) Insert(context.Context, *EnterpriseInfo) (*InsertResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedEnterpriseServer) Delete(context.Context, *DeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEnterpriseServer) Change(context.Context, *EnterpriseInfoWithId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Change not implemented")
}
func (UnimplementedEnterpriseServer) PartialChange(context.Context, *EnterpriseInfoWithId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialChange not implemented")
}
func (UnimplementedEnterpriseServer) FindOneByName(context.Context, *FindOneByNameReq) (*EnterpriseInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneByName not implemented")
}
func (UnimplementedEnterpriseServer) InsertXa(context.Context, *EnterpriseInfo) (*InsertResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertXa not implemented")
}
func (UnimplementedEnterpriseServer) mustEmbedUnimplementedEnterpriseServer() {}

// UnsafeEnterpriseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnterpriseServer will
// result in compilation errors.
type UnsafeEnterpriseServer interface {
	mustEmbedUnimplementedEnterpriseServer()
}

func RegisterEnterpriseServer(s grpc.ServiceRegistrar, srv EnterpriseServer) {
	s.RegisterService(&Enterprise_ServiceDesc, srv)
}

func _Enterprise_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterpriseInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.enterprise/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServer).Insert(ctx, req.(*EnterpriseInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enterprise_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.enterprise/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enterprise_Change_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterpriseInfoWithId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServer).Change(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.enterprise/Change",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServer).Change(ctx, req.(*EnterpriseInfoWithId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enterprise_PartialChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterpriseInfoWithId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServer).PartialChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.enterprise/PartialChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServer).PartialChange(ctx, req.(*EnterpriseInfoWithId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enterprise_FindOneByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServer).FindOneByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.enterprise/FindOneByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServer).FindOneByName(ctx, req.(*FindOneByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enterprise_InsertXa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterpriseInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseServer).InsertXa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.enterprise/InsertXa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseServer).InsertXa(ctx, req.(*EnterpriseInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Enterprise_ServiceDesc is the grpc.ServiceDesc for Enterprise service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Enterprise_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enterprise.enterprise",
	HandlerType: (*EnterpriseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _Enterprise_Insert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Enterprise_Delete_Handler,
		},
		{
			MethodName: "Change",
			Handler:    _Enterprise_Change_Handler,
		},
		{
			MethodName: "PartialChange",
			Handler:    _Enterprise_PartialChange_Handler,
		},
		{
			MethodName: "FindOneByName",
			Handler:    _Enterprise_FindOneByName_Handler,
		},
		{
			MethodName: "InsertXa",
			Handler:    _Enterprise_InsertXa_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enterprise.proto",
}
