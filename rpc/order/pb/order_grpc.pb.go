// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: order.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderClient interface {
	Insert(ctx context.Context, in *OrderInfo, opts ...grpc.CallOption) (*InsertResp, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *OrderInfo, opts ...grpc.CallOption) (*Empty, error)
	// rpc CustomUpdate (OrderInfo) returns (Empty);
	FindOneById(ctx context.Context, in *FindOneByIdReq, opts ...grpc.CallOption) (*OrderInfo, error)
	FindListByWorkshop(ctx context.Context, in *FindListByWorkshopReq, opts ...grpc.CallOption) (*OrderList, error)
	FindListByEnterprise(ctx context.Context, in *FindListByEnterpriseReq, opts ...grpc.CallOption) (*OrderList, error)
	FindListByProductionPlan(ctx context.Context, in *FindListByProductionPlanReq, opts ...grpc.CallOption) (*OrderList, error)
	UpdateStateByProductionId(ctx context.Context, in *UpdateStateByProductionIdReq, opts ...grpc.CallOption) (*Empty, error)
}

type orderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderClient(cc grpc.ClientConnInterface) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) Insert(ctx context.Context, in *OrderInfo, opts ...grpc.CallOption) (*InsertResp, error) {
	out := new(InsertResp)
	err := c.cc.Invoke(ctx, "/order.order/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/order.order/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) Update(ctx context.Context, in *OrderInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/order.order/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) FindOneById(ctx context.Context, in *FindOneByIdReq, opts ...grpc.CallOption) (*OrderInfo, error) {
	out := new(OrderInfo)
	err := c.cc.Invoke(ctx, "/order.order/FindOneById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) FindListByWorkshop(ctx context.Context, in *FindListByWorkshopReq, opts ...grpc.CallOption) (*OrderList, error) {
	out := new(OrderList)
	err := c.cc.Invoke(ctx, "/order.order/FindListByWorkshop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) FindListByEnterprise(ctx context.Context, in *FindListByEnterpriseReq, opts ...grpc.CallOption) (*OrderList, error) {
	out := new(OrderList)
	err := c.cc.Invoke(ctx, "/order.order/FindListByEnterprise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) FindListByProductionPlan(ctx context.Context, in *FindListByProductionPlanReq, opts ...grpc.CallOption) (*OrderList, error) {
	out := new(OrderList)
	err := c.cc.Invoke(ctx, "/order.order/FindListByProductionPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) UpdateStateByProductionId(ctx context.Context, in *UpdateStateByProductionIdReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/order.order/UpdateStateByProductionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServer is the server API for Order service.
// All implementations must embed UnimplementedOrderServer
// for forward compatibility
type OrderServer interface {
	Insert(context.Context, *OrderInfo) (*InsertResp, error)
	Delete(context.Context, *DeleteReq) (*Empty, error)
	Update(context.Context, *OrderInfo) (*Empty, error)
	// rpc CustomUpdate (OrderInfo) returns (Empty);
	FindOneById(context.Context, *FindOneByIdReq) (*OrderInfo, error)
	FindListByWorkshop(context.Context, *FindListByWorkshopReq) (*OrderList, error)
	FindListByEnterprise(context.Context, *FindListByEnterpriseReq) (*OrderList, error)
	FindListByProductionPlan(context.Context, *FindListByProductionPlanReq) (*OrderList, error)
	UpdateStateByProductionId(context.Context, *UpdateStateByProductionIdReq) (*Empty, error)
	mustEmbedUnimplementedOrderServer()
}

// UnimplementedOrderServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServer struct {
}

func (UnimplementedOrderServer) Insert(context.Context, *OrderInfo) (*InsertResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedOrderServer) Delete(context.Context, *DeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrderServer) Update(context.Context, *OrderInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrderServer) FindOneById(context.Context, *FindOneByIdReq) (*OrderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneById not implemented")
}
func (UnimplementedOrderServer) FindListByWorkshop(context.Context, *FindListByWorkshopReq) (*OrderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindListByWorkshop not implemented")
}
func (UnimplementedOrderServer) FindListByEnterprise(context.Context, *FindListByEnterpriseReq) (*OrderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindListByEnterprise not implemented")
}
func (UnimplementedOrderServer) FindListByProductionPlan(context.Context, *FindListByProductionPlanReq) (*OrderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindListByProductionPlan not implemented")
}
func (UnimplementedOrderServer) UpdateStateByProductionId(context.Context, *UpdateStateByProductionIdReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStateByProductionId not implemented")
}
func (UnimplementedOrderServer) mustEmbedUnimplementedOrderServer() {}

// UnsafeOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServer will
// result in compilation errors.
type UnsafeOrderServer interface {
	mustEmbedUnimplementedOrderServer()
}

func RegisterOrderServer(s grpc.ServiceRegistrar, srv OrderServer) {
	s.RegisterService(&Order_ServiceDesc, srv)
}

func _Order_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.order/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).Insert(ctx, req.(*OrderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.order/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.order/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).Update(ctx, req.(*OrderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_FindOneById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).FindOneById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.order/FindOneById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).FindOneById(ctx, req.(*FindOneByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_FindListByWorkshop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindListByWorkshopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).FindListByWorkshop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.order/FindListByWorkshop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).FindListByWorkshop(ctx, req.(*FindListByWorkshopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_FindListByEnterprise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindListByEnterpriseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).FindListByEnterprise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.order/FindListByEnterprise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).FindListByEnterprise(ctx, req.(*FindListByEnterpriseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_FindListByProductionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindListByProductionPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).FindListByProductionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.order/FindListByProductionPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).FindListByProductionPlan(ctx, req.(*FindListByProductionPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_UpdateStateByProductionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStateByProductionIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).UpdateStateByProductionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.order/UpdateStateByProductionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).UpdateStateByProductionId(ctx, req.(*UpdateStateByProductionIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Order_ServiceDesc is the grpc.ServiceDesc for Order service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Order_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _Order_Insert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Order_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Order_Update_Handler,
		},
		{
			MethodName: "FindOneById",
			Handler:    _Order_FindOneById_Handler,
		},
		{
			MethodName: "FindListByWorkshop",
			Handler:    _Order_FindListByWorkshop_Handler,
		},
		{
			MethodName: "FindListByEnterprise",
			Handler:    _Order_FindListByEnterprise_Handler,
		},
		{
			MethodName: "FindListByProductionPlan",
			Handler:    _Order_FindListByProductionPlan_Handler,
		},
		{
			MethodName: "UpdateStateByProductionId",
			Handler:    _Order_UpdateStateByProductionId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
