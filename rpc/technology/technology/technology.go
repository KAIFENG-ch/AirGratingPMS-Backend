// Code generated by goctl. DO NOT EDIT!
// Source: technology.proto

package technology

import (
	"context"

	"air-grating-pms-backend/rpc/technology/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteReq               = pb.DeleteReq
	Empty                   = pb.Empty
	FindListByEnterpriseReq = pb.FindListByEnterpriseReq
	FindListByWorkshopReq   = pb.FindListByWorkshopReq
	FindOneByIdReq          = pb.FindOneByIdReq
	InsertResp              = pb.InsertResp
	TechnologyInfo          = pb.TechnologyInfo
	TechnologyList          = pb.TechnologyList

	Technology interface {
		Insert(ctx context.Context, in *TechnologyInfo, opts ...grpc.CallOption) (*InsertResp, error)
		Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error)
		Update(ctx context.Context, in *TechnologyInfo, opts ...grpc.CallOption) (*Empty, error)
		FindOneById(ctx context.Context, in *FindOneByIdReq, opts ...grpc.CallOption) (*TechnologyInfo, error)
		FindListByWorkshop(ctx context.Context, in *FindListByWorkshopReq, opts ...grpc.CallOption) (*TechnologyList, error)
		FindListByEnterprise(ctx context.Context, in *FindListByEnterpriseReq, opts ...grpc.CallOption) (*TechnologyList, error)
	}

	defaultTechnology struct {
		cli zrpc.Client
	}
)

func NewTechnology(cli zrpc.Client) Technology {
	return &defaultTechnology{
		cli: cli,
	}
}

func (m *defaultTechnology) Insert(ctx context.Context, in *TechnologyInfo, opts ...grpc.CallOption) (*InsertResp, error) {
	client := pb.NewTechnologyClient(m.cli.Conn())
	return client.Insert(ctx, in, opts...)
}

func (m *defaultTechnology) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewTechnologyClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}

func (m *defaultTechnology) Update(ctx context.Context, in *TechnologyInfo, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewTechnologyClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultTechnology) FindOneById(ctx context.Context, in *FindOneByIdReq, opts ...grpc.CallOption) (*TechnologyInfo, error) {
	client := pb.NewTechnologyClient(m.cli.Conn())
	return client.FindOneById(ctx, in, opts...)
}

func (m *defaultTechnology) FindListByWorkshop(ctx context.Context, in *FindListByWorkshopReq, opts ...grpc.CallOption) (*TechnologyList, error) {
	client := pb.NewTechnologyClient(m.cli.Conn())
	return client.FindListByWorkshop(ctx, in, opts...)
}

func (m *defaultTechnology) FindListByEnterprise(ctx context.Context, in *FindListByEnterpriseReq, opts ...grpc.CallOption) (*TechnologyList, error) {
	client := pb.NewTechnologyClient(m.cli.Conn())
	return client.FindListByEnterprise(ctx, in, opts...)
}
