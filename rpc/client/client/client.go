// Code generated by goctl. DO NOT EDIT!
// Source: client.proto

package client

import (
	"context"

	"air-grating-pms-backend/rpc/client/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ClientInfo              = pb.ClientInfo
	ClientList              = pb.ClientList
	DeleteReq               = pb.DeleteReq
	Empty                   = pb.Empty
	FindListByEnterpriseReq = pb.FindListByEnterpriseReq
	FindListByWorkshopReq   = pb.FindListByWorkshopReq
	FindOneByIdReq          = pb.FindOneByIdReq
	InsertResp              = pb.InsertResp

	Client interface {
		Insert(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*InsertResp, error)
		Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error)
		Update(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Empty, error)
		FindOneById(ctx context.Context, in *FindOneByIdReq, opts ...grpc.CallOption) (*ClientInfo, error)
		FindListByWorkshop(ctx context.Context, in *FindListByWorkshopReq, opts ...grpc.CallOption) (*ClientList, error)
		FindListByEnterprise(ctx context.Context, in *FindListByEnterpriseReq, opts ...grpc.CallOption) (*ClientList, error)
	}

	defaultClient struct {
		cli zrpc.Client
	}
)

func NewClient(cli zrpc.Client) Client {
	return &defaultClient{
		cli: cli,
	}
}

func (m *defaultClient) Insert(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*InsertResp, error) {
	client := pb.NewClientClient(m.cli.Conn())
	return client.Insert(ctx, in, opts...)
}

func (m *defaultClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewClientClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}

func (m *defaultClient) Update(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewClientClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultClient) FindOneById(ctx context.Context, in *FindOneByIdReq, opts ...grpc.CallOption) (*ClientInfo, error) {
	client := pb.NewClientClient(m.cli.Conn())
	return client.FindOneById(ctx, in, opts...)
}

func (m *defaultClient) FindListByWorkshop(ctx context.Context, in *FindListByWorkshopReq, opts ...grpc.CallOption) (*ClientList, error) {
	client := pb.NewClientClient(m.cli.Conn())
	return client.FindListByWorkshop(ctx, in, opts...)
}

func (m *defaultClient) FindListByEnterprise(ctx context.Context, in *FindListByEnterpriseReq, opts ...grpc.CallOption) (*ClientList, error) {
	client := pb.NewClientClient(m.cli.Conn())
	return client.FindListByEnterprise(ctx, in, opts...)
}
